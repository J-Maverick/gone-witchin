//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/PlayerActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerActions"",
    ""maps"": [
        {
            ""name"": ""Cauldron"",
            ""id"": ""9a6dfe2b-bb69-46d5-899b-8748c2cde8a7"",
            ""actions"": [
                {
                    ""name"": ""FanFlame"",
                    ""type"": ""Button"",
                    ""id"": ""7445a6bf-d5f7-4bdc-9f1a-2c963e13cbcf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pointer"",
                    ""type"": ""PassThrough"",
                    ""id"": ""1cdc236b-beb3-4082-8ac7-af0c39caed57"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ba3bd966-df96-49b7-81b7-c16d2f428512"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FanFlame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bb2876e5-25a9-4011-b9ce-fd356d870b01"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pointer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Cauldron
        m_Cauldron = asset.FindActionMap("Cauldron", throwIfNotFound: true);
        m_Cauldron_FanFlame = m_Cauldron.FindAction("FanFlame", throwIfNotFound: true);
        m_Cauldron_Pointer = m_Cauldron.FindAction("Pointer", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Cauldron
    private readonly InputActionMap m_Cauldron;
    private ICauldronActions m_CauldronActionsCallbackInterface;
    private readonly InputAction m_Cauldron_FanFlame;
    private readonly InputAction m_Cauldron_Pointer;
    public struct CauldronActions
    {
        private @PlayerActions m_Wrapper;
        public CauldronActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @FanFlame => m_Wrapper.m_Cauldron_FanFlame;
        public InputAction @Pointer => m_Wrapper.m_Cauldron_Pointer;
        public InputActionMap Get() { return m_Wrapper.m_Cauldron; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CauldronActions set) { return set.Get(); }
        public void SetCallbacks(ICauldronActions instance)
        {
            if (m_Wrapper.m_CauldronActionsCallbackInterface != null)
            {
                @FanFlame.started -= m_Wrapper.m_CauldronActionsCallbackInterface.OnFanFlame;
                @FanFlame.performed -= m_Wrapper.m_CauldronActionsCallbackInterface.OnFanFlame;
                @FanFlame.canceled -= m_Wrapper.m_CauldronActionsCallbackInterface.OnFanFlame;
                @Pointer.started -= m_Wrapper.m_CauldronActionsCallbackInterface.OnPointer;
                @Pointer.performed -= m_Wrapper.m_CauldronActionsCallbackInterface.OnPointer;
                @Pointer.canceled -= m_Wrapper.m_CauldronActionsCallbackInterface.OnPointer;
            }
            m_Wrapper.m_CauldronActionsCallbackInterface = instance;
            if (instance != null)
            {
                @FanFlame.started += instance.OnFanFlame;
                @FanFlame.performed += instance.OnFanFlame;
                @FanFlame.canceled += instance.OnFanFlame;
                @Pointer.started += instance.OnPointer;
                @Pointer.performed += instance.OnPointer;
                @Pointer.canceled += instance.OnPointer;
            }
        }
    }
    public CauldronActions @Cauldron => new CauldronActions(this);
    public interface ICauldronActions
    {
        void OnFanFlame(InputAction.CallbackContext context);
        void OnPointer(InputAction.CallbackContext context);
    }
}
